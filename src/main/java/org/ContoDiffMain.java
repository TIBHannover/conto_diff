/*
 *
 *  * Copyright Â© 2014 - 2021 Leipzig University (Database Research Group)
 *  *
 *  * This program is free software: you can redistribute it and/or modify
 *  * it under the terms of the GNU General Public License as published by
 *  * the Free Software Foundation, version 3.
 *  *
 *  * This program is distributed in the hope that it will be useful, but
 *  * WITHOUT ANY WARRANTY; without even the implied warranty of
 *  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  * General Public License for more details.
 *  *
 *  * You should have received a copy of the GNU General Public License
 *  * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org;

import org.apache.commons.cli.*;
import org.gomma.diff.DiffComputation;
import org.gomma.diff.DiffExecutor;
import org.io.OntologyReader;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.webdifftool.client.model.DiffEvolutionMapping;
import org.webdifftool.client.model.SemanticDiff;
import org.webdifftool.client.model.changes.Change;
import org.webdifftool.server.OWLManagerCustom;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.function.DoubleToIntFunction;

public class ContoDiffMain {

    static Options options;

    static {
        options = new Options();
        Option inputFirstOnt = new Option(ConsoleConstants.INPUT_ONTOLOGY_A,
                "first ontology", true, "path of the first ontology");
        Option inputFirstOntIRI = new Option("iria",
                ConsoleConstants.INPUT_ONTOLOGY_A_IRI, true, "IRI of the first ontology");
        Option inputSecondOnt = new Option(ConsoleConstants.INPUT_ONTOLOGY_B,
                "path of the second ontology", true, "second ontology");
        Option inputSecondOntIRI = new Option("irib",
                ConsoleConstants.INPUT_ONTOLOGY_B_IRI, true, "IRI of the second ontology");
        Option outputFile =  new Option(ConsoleConstants.OUTPUT_FILE, "file with the compact diff representation", true,
                "output file");
        Option diff = new Option(ConsoleConstants.DIFF, "compute Diff", false,
                "compute diff");

        options.addOption(inputFirstOnt);
        options.addOption(inputFirstOntIRI);
        options.addOption(inputSecondOnt);
        options.addOption(inputSecondOntIRI);
        options.addOption(outputFile);
        options.addOption(diff);
    }

    public static void main(String[] args) throws IOException {
        CommandLine cmd = parseCommand(args);

        OntologyReader reader = new OntologyReader();
        OWLOntology firstOnt = null;
        OWLOntology secontOnt = null;
        FileWriter output = null;
        try {
            System.out.println(cmd.getOptionValue(ConsoleConstants.INPUT_ONTOLOGY_A));
            System.out.println(cmd.getOptionValue(ConsoleConstants.INPUT_ONTOLOGY_B));

            String first = cmd.getOptionValue(ConsoleConstants.INPUT_ONTOLOGY_A);
            String firstIri = cmd.getOptionValue(ConsoleConstants.INPUT_ONTOLOGY_A_IRI);

            String second = cmd.getOptionValue(ConsoleConstants.INPUT_ONTOLOGY_B);
            String secondIri = cmd.getOptionValue(ConsoleConstants.INPUT_ONTOLOGY_B_IRI);

            firstOnt = setOntology(reader, first, firstIri);
            secontOnt = setOntology(reader, second, secondIri);
            output = new FileWriter(cmd.getOptionValue(ConsoleConstants.OUTPUT_FILE));
        } catch (NullPointerException e) {

            System.err.println("first or second ontology not found");
            e.printStackTrace();
        } catch (OWLOntologyCreationException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("load ontology "+ firstOnt.getClassesInSignature().size());
//        if (cmd.hasOption(ConsoleConstants.DIFF)) {
            DiffExecutor.getSingleton().setupRepository();
            DiffComputation computation = new DiffComputation();
            DiffEvolutionMapping mapping = computation.computeDiff(firstOnt, secontOnt);

            Map<String, String> prefixes = OWLManagerCustom.getAllPrefixes(firstOnt);
            StringBuilder strPrefixBuilder = new StringBuilder();

            strPrefixBuilder.append("\n");

            String header = OWLManagerCustom.getAutoGeneratedHeader(firstOnt).toString();
            SemanticDiff sdiff = new SemanticDiff();

            for (Map.Entry<String, Change> change : mapping.allChanges.entrySet()) {
                OWLManagerCustom.getProvDmMap(prefixes, header, change.getKey() + change.getValue().getSimpleWordRepresentation(), sdiff.getProvDMs());
            }

            OWLManagerCustom.generateLocationMap(sdiff.getProvDMs(), sdiff.getLocations());


            String ontologyUri = "https://raw.githubusercontent.com/OpenEnergyPlatform/ontology/master/src/ontology/imports/iao-extracted.owl";
            sdiff.setBaseEntity(OWLManagerCustom.generateBaseEntity(ontologyUri));

            OWLManagerCustom.generateActivityMap(sdiff.getLocations(), sdiff.getActivities());

            String[] URIs = new String[]{"https://raw.githubusercontent.com/OpenEnergyPlatform/ontology/42c6448efab195d6e354b00ca0db71fa8910c0a8/src/ontology/imports/iao-extracted.owl",
                                            "https://raw.githubusercontent.com/OpenEnergyPlatform/ontology/9d784dbb4810548940b76aff4a8790d6ad379bf6/src/ontology/imports/iao-extracted.owl"};
            for (String rawUri : URIs) {
                OWLManagerCustom.generateSourceEntiry(rawUri, sdiff.getSourceEntities());
            }

            sdiff.setSoftwareAgent(OWLManagerCustom.generateSoftwareAgent());
            OWLManagerCustom.generateSDiffEntity(sdiff.getSourceEntities(), sdiff.getSdiffEntities(), sdiff.getBaseEntity());

            String filePath = "semantic_diff.json";

            OWLManagerCustom.writeSemanticDiffToFile(sdiff, filePath);
            StringBuilder sb = new StringBuilder();

            sb.append(OWLManagerCustom.prefixesMapToString(prefixes)).append(System.lineSeparator());
            sb.append(OWLManagerCustom.getAutoGeneratedHeader(firstOnt));
            sb.append(sdiff.getBaseEntity()).append(System.lineSeparator()).append(System.lineSeparator());

            for (Map.Entry<String, String> entry : sdiff.getLocations().entrySet()) {
                sb.append(entry.getValue());
            }

            for (Map.Entry<String, String> entry : sdiff.getActivities().entrySet()) {
                sb.append(entry.getValue());
            }

            for (Map.Entry<String, String> entry : sdiff.getSourceEntities().entrySet()) {
                sb.append(entry.getValue());
            }

            for (Map.Entry<String, String> entry : sdiff.getSdiffEntities().entrySet()) {
                sb.append(entry.getValue()).append(System.lineSeparator());
            }
            sb.append(sdiff.getSoftwareAgent());

            Files.write(Paths.get("sdiff.ttl"), sb.toString().getBytes());
            if (output != null){
                output.write(mapping.getFulltextOfCompactDiff());
            }
            output.close();
//        }

    }


    private static OWLOntology setOntology(OntologyReader reader, String file, String iri) throws IllegalArgumentException, OWLOntologyCreationException {
        if (file != null && iri != null) {
            throw new IllegalArgumentException("Path and IRI provided at the same time!");
        }
        else if (file != null) {
            return reader.loadOntology(new File(file));
        }
        else if (iri != null) {
            return reader.loadOntology(IRI.create(iri));
        }
        else return null;
    }

    private static CommandLine parseCommand(String[] args) {
        CommandLineParser parser = new DefaultParser();
        HelpFormatter formatter = new HelpFormatter();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, args);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            formatter.printHelp("utility-name", options);
            System.exit(1);
        }
        return cmd;
    }
}
